spring:
  application:
    name: flight-booking-system-test

  # PostgreSQL Database Configuration (Production DB with cleanup)
  datasource:
    url: jdbc:postgresql://localhost:5433/flight_booking
    username: flight_user
    password: flight_password
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5
      minimum-idle: 1
      connection-timeout: 10000
      idle-timeout: 300000
      max-lifetime: 600000

  # Flyway Configuration (Production DB)
  flyway:
    url: jdbc:postgresql://localhost:5433/flight_booking
    user: flight_user
    password: flight_password
    schemas: public
    clean-disabled: false

  # Redis Test Configuration
  data:
    redis:
      host: ${REDIS_HOST:localhost}
      port: ${REDIS_PORT:6380}
      password: ${REDIS_PASSWORD:}
      timeout: 1000ms
      jedis:
        pool:
          max-active: 10
          max-idle: 5
          min-idle: 1
          max-wait: 1000ms

  # Kafka Test Configuration
  kafka:
    bootstrap-servers: localhost:9093
    consumer:
      group-id: flight-booking-test-consumer
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "com.flightbooking.domain.*"
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      acks: all
      retries: 1

# Custom Redis test configuration
redis:
  search:
    cache-ttl: 60  # 1 minute for tests
  booking:
    reservation-ttl: 30    # 30 seconds for tests
    cleanup-interval: 10   # 10 seconds between cleanup

# Flight events configuration for tests
flight:
  events:
    producer:
      enabled: false  # Disable Kafka producer for deterministic tests

# Test-specific logging
logging:
  level:
    com.flightbooking: DEBUG
    org.springframework.kafka: WARN
    org.springframework.test: INFO
    root: WARN

# Test performance configuration
test:
  performance:
    booking:
      concurrent-attempts: 10
      target-success-rate: 2.0
      max-booking-time-ms: 2000
    search:
      concurrent-requests: 150
      target-p90-latency-ms: 100
      cache-hit-ratio-threshold: 95.0

# JUnit configuration
junit:
  jupiter:
    execution:
      parallel:
        enabled: true
        mode:
          default: concurrent